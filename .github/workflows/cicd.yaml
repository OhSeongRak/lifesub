name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [member, mysub, recommend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build and Test
      run: |
        if [ "${{ matrix.service }}" = "mysub" ]; then
          ./gradlew :mysub-infra:clean :mysub-infra:build :mysub-infra:test :mysub-infra:jacocoTestReport
        else
          ./gradlew :${{ matrix.service }}:clean :${{ matrix.service }}:build :${{ matrix.service }}:test :${{ matrix.service }}:jacocoTestReport
        fi

    - name: SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        if [ "${{ matrix.service }}" = "mysub" ]; then
          ./gradlew :mysub-infra:sonar \
            -Dsonar.projectKey=lifesub-${{ matrix.service }}-dg0408 \
            -Dsonar.projectName=lifesub-${{ matrix.service }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        else
          ./gradlew :${{ matrix.service }}:sonar \
            -Dsonar.projectKey=lifesub-${{ matrix.service }}-dg0408 \
            -Dsonar.projectName=lifesub-${{ matrix.service }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-jar
        path: |
          ${{ matrix.service == 'mysub' && 'mysub-infra' || matrix.service }}/build/libs/*.jar

  quality-gate:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [member, mysub, recommend]
    
    steps:
    - name: Wait for SonarQube Quality Gate
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 10
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        scanMetadataReportFile: .scannerwork/report-task.txt

  release:
    runs-on: ubuntu-latest
    needs: [build, quality-gate]
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value; do
          # Skip comments and empty lines
          if [[ $key =~ ^[[:space:]]*# ]] || [[ -z "$key" ]]; then
            continue
          fi
          # Remove leading/trailing whitespace and export
          key=$(echo "$key" | xargs)
          value=$(echo "$value" | xargs)
          echo "$key=$value" >> $GITHUB_ENV
        done < deployment/deploy_env_vars

    - name: Generate image tag
      id: generate-tag
      run: |
        IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $IMAGE_TAG"

    - name: Login to Azure Container Registry
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ env.registry }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Build and Push Docker Images
      run: |
        services=("member" "mysub" "recommend")
        for service in "${services[@]}"; do
          echo "Building image for $service..."
          
          if [ "$service" = "mysub" ]; then
            build_dir="mysub-infra"
            jar_file="mysub.jar"
          else
            build_dir="$service"
            jar_file="$service.jar"
          fi
          
          # Copy artifact to build directory
          mkdir -p $build_dir/build/libs
          cp artifacts/$service-jar/*.jar $build_dir/build/libs/
          
          # Build Docker image
          docker build \
            --build-arg BUILD_LIB_DIR="$build_dir/build/libs" \
            --build-arg ARTIFACTORY_FILE="$jar_file" \
            -f deployment/container/Dockerfile \
            -t ${{ env.registry }}/${{ env.image_org }}/$service:${{ steps.generate-tag.outputs.image-tag }} .
          
          # Push Docker image
          docker push ${{ env.registry }}/${{ env.image_org }}/$service:${{ steps.generate-tag.outputs.image-tag }}
          
          echo "Successfully built and pushed $service:${{ steps.generate-tag.outputs.image-tag }}"
        done

  deploy:
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value; do
          # Skip comments and empty lines
          if [[ $key =~ ^[[:space:]]*# ]] || [[ -z "$key" ]]; then
            continue
          fi
          # Remove leading/trailing whitespace and export
          key=$(echo "$key" | xargs)
          value=$(echo "$value" | xargs)
          echo "$key=$value" >> $GITHUB_ENV
        done < deployment/deploy_env_vars

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Generate Kubernetes manifests
      run: |
        # Set image tag from previous job
        export member_image_path=${{ env.registry }}/${{ env.image_org }}/member:${{ needs.release.outputs.image-tag }}
        export mysub_image_path=${{ env.registry }}/${{ env.image_org }}/mysub:${{ needs.release.outputs.image-tag }}
        export recommend_image_path=${{ env.registry }}/${{ env.image_org }}/recommend:${{ needs.release.outputs.image-tag }}
        
        # Generate manifest from template
        envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
        
        echo "Generated manifest file:"
        cat deployment/deploy.yaml

    - name: Deploy to AKS
      run: |
        kubectl apply -f deployment/deploy.yaml

    - name: Wait for deployments
      run: |
        echo "Waiting for deployments to be ready..."
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s

    - name: Deployment Summary
      run: |
        echo "=========================================="
        echo "Backend services deployment completed!"
        echo "Access URLs:"
        echo "Member API: http://${{ env.ingress_host }}/member"
        echo "Mysub API: http://${{ env.ingress_host }}/mysub"
        echo "Recommend API: http://${{ env.ingress_host }}/recommend"
        echo "=========================================="
